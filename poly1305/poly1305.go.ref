// poly1305. 
// Must be used with cipher, such as AES.
// Read more: http://cr.yp.to/mac.html
//
// Translated to Go from C by Dmitry Chestnykh
// Public domain
//
// Original implementation from NaCl:
// crypto_onetimeauth/poly1305/ref 
// 20080912
// D. J. Bernstein
// Public domain.

package poly1305

const (
	KeySize    = 32
	OutputSize = 16
)

func add(h []uint32, c [17]uint32) {
	var u uint32
	for j, v := range c {
		u += h[j] + v
		h[j] = u & 255
		u >>= 8
	}
}

func squeeze(h []uint32) {
	var u uint32
	for j := 0; j < 16; j++ {
		u += h[j]
		h[j] = u & 255
		u >>= 8
	}
	u += h[16]
	h[16] = u & 3
	u = 5 * (u >> 2)
	for j := 0; j < 16; j++ {
		u += h[j]
		h[j] = u & 255
		u >>= 8
	}
	u += h[16]
	h[16] = u
}

var minusp = [17]uint32{
	5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 252}

func freeze(h []uint32) {
	var horig [17]uint32
	for i, v := range h {
		horig[i] = v
	}
	add(h, minusp)
	negative := uint32(-(h[16] >> 7))
	for i, v := range horig {
		h[i] ^= negative & (v ^ h[i])
	}
}

func mulmod(h []uint32, r [17]uint32) {
	h0 := h[0]
	h1 := h[1]
	h2 := h[2]
	h3 := h[3]
	h4 := h[4]
	h5 := h[5]
	h6 := h[6]
	h7 := h[7]
	h8 := h[8]
	h9 := h[9]
	h10 := h[10]
	h11 := h[11]
	h12 := h[12]
	h13 := h[13]
	h14 := h[14]
	h15 := h[15]
	h16 := h[16]
	u := h0 * r[0]
	u += 320 * h1 * r[16]
	u += 320 * h2 * r[15]
	u += 320 * h3 * r[14]
	u += 320 * h4 * r[13]
	u += 320 * h5 * r[12]
	u += 320 * h6 * r[11]
	u += 320 * h7 * r[10]
	u += 320 * h8 * r[9]
	u += 320 * h9 * r[8]
	u += 320 * h10 * r[7]
	u += 320 * h11 * r[6]
	u += 320 * h12 * r[5]
	u += 320 * h13 * r[4]
	u += 320 * h14 * r[3]
	u += 320 * h15 * r[2]
	u += 320 * h16 * r[1]
	hr0 := u
	u = h0 * r[1]
	u += h1 * r[0]
	u += 320 * h2 * r[16]
	u += 320 * h3 * r[15]
	u += 320 * h4 * r[14]
	u += 320 * h5 * r[13]
	u += 320 * h6 * r[12]
	u += 320 * h7 * r[11]
	u += 320 * h8 * r[10]
	u += 320 * h9 * r[9]
	u += 320 * h10 * r[8]
	u += 320 * h11 * r[7]
	u += 320 * h12 * r[6]
	u += 320 * h13 * r[5]
	u += 320 * h14 * r[4]
	u += 320 * h15 * r[3]
	u += 320 * h16 * r[2]
	hr1 := u
	u = h0 * r[2]
	u += h1 * r[1]
	u += h2 * r[0]
	u += 320 * h3 * r[16]
	u += 320 * h4 * r[15]
	u += 320 * h5 * r[14]
	u += 320 * h6 * r[13]
	u += 320 * h7 * r[12]
	u += 320 * h8 * r[11]
	u += 320 * h9 * r[10]
	u += 320 * h10 * r[9]
	u += 320 * h11 * r[8]
	u += 320 * h12 * r[7]
	u += 320 * h13 * r[6]
	u += 320 * h14 * r[5]
	u += 320 * h15 * r[4]
	u += 320 * h16 * r[3]
	hr2 := u
	u = h0 * r[3]
	u += h1 * r[2]
	u += h2 * r[1]
	u += h3 * r[0]
	u += 320 * h4 * r[16]
	u += 320 * h5 * r[15]
	u += 320 * h6 * r[14]
	u += 320 * h7 * r[13]
	u += 320 * h8 * r[12]
	u += 320 * h9 * r[11]
	u += 320 * h10 * r[10]
	u += 320 * h11 * r[9]
	u += 320 * h12 * r[8]
	u += 320 * h13 * r[7]
	u += 320 * h14 * r[6]
	u += 320 * h15 * r[5]
	u += 320 * h16 * r[4]
	hr3 := u
	u = h0 * r[4]
	u += h1 * r[3]
	u += h2 * r[2]
	u += h3 * r[1]
	u += h4 * r[0]
	u += 320 * h5 * r[16]
	u += 320 * h6 * r[15]
	u += 320 * h7 * r[14]
	u += 320 * h8 * r[13]
	u += 320 * h9 * r[12]
	u += 320 * h10 * r[11]
	u += 320 * h11 * r[10]
	u += 320 * h12 * r[9]
	u += 320 * h13 * r[8]
	u += 320 * h14 * r[7]
	u += 320 * h15 * r[6]
	u += 320 * h16 * r[5]
	hr4 := u
	u = h0 * r[5]
	u += h1 * r[4]
	u += h2 * r[3]
	u += h3 * r[2]
	u += h4 * r[1]
	u += h5 * r[0]
	u += 320 * h6 * r[16]
	u += 320 * h7 * r[15]
	u += 320 * h8 * r[14]
	u += 320 * h9 * r[13]
	u += 320 * h10 * r[12]
	u += 320 * h11 * r[11]
	u += 320 * h12 * r[10]
	u += 320 * h13 * r[9]
	u += 320 * h14 * r[8]
	u += 320 * h15 * r[7]
	u += 320 * h16 * r[6]
	hr5 := u
	u = h0 * r[6]
	u += h1 * r[5]
	u += h2 * r[4]
	u += h3 * r[3]
	u += h4 * r[2]
	u += h5 * r[1]
	u += h6 * r[0]
	u += 320 * h7 * r[16]
	u += 320 * h8 * r[15]
	u += 320 * h9 * r[14]
	u += 320 * h10 * r[13]
	u += 320 * h11 * r[12]
	u += 320 * h12 * r[11]
	u += 320 * h13 * r[10]
	u += 320 * h14 * r[9]
	u += 320 * h15 * r[8]
	u += 320 * h16 * r[7]
	hr6 := u
	u = h0 * r[7]
	u += h1 * r[6]
	u += h2 * r[5]
	u += h3 * r[4]
	u += h4 * r[3]
	u += h5 * r[2]
	u += h6 * r[1]
	u += h7 * r[0]
	u += 320 * h8 * r[16]
	u += 320 * h9 * r[15]
	u += 320 * h10 * r[14]
	u += 320 * h11 * r[13]
	u += 320 * h12 * r[12]
	u += 320 * h13 * r[11]
	u += 320 * h14 * r[10]
	u += 320 * h15 * r[9]
	u += 320 * h16 * r[8]
	hr7 := u
	u = h0 * r[8]
	u += h1 * r[7]
	u += h2 * r[6]
	u += h3 * r[5]
	u += h4 * r[4]
	u += h5 * r[3]
	u += h6 * r[2]
	u += h7 * r[1]
	u += h8 * r[0]
	u += 320 * h9 * r[16]
	u += 320 * h10 * r[15]
	u += 320 * h11 * r[14]
	u += 320 * h12 * r[13]
	u += 320 * h13 * r[12]
	u += 320 * h14 * r[11]
	u += 320 * h15 * r[10]
	u += 320 * h16 * r[9]
	hr8 := u
	u = h0 * r[9]
	u += h1 * r[8]
	u += h2 * r[7]
	u += h3 * r[6]
	u += h4 * r[5]
	u += h5 * r[4]
	u += h6 * r[3]
	u += h7 * r[2]
	u += h8 * r[1]
	u += h9 * r[0]
	u += 320 * h10 * r[16]
	u += 320 * h11 * r[15]
	u += 320 * h12 * r[14]
	u += 320 * h13 * r[13]
	u += 320 * h14 * r[12]
	u += 320 * h15 * r[11]
	u += 320 * h16 * r[10]
	hr9 := u
	u = h0 * r[10]
	u += h1 * r[9]
	u += h2 * r[8]
	u += h3 * r[7]
	u += h4 * r[6]
	u += h5 * r[5]
	u += h6 * r[4]
	u += h7 * r[3]
	u += h8 * r[2]
	u += h9 * r[1]
	u += h10 * r[0]
	u += 320 * h11 * r[16]
	u += 320 * h12 * r[15]
	u += 320 * h13 * r[14]
	u += 320 * h14 * r[13]
	u += 320 * h15 * r[12]
	u += 320 * h16 * r[11]
	hr10 := u
	u = h0 * r[11]
	u += h1 * r[10]
	u += h2 * r[9]
	u += h3 * r[8]
	u += h4 * r[7]
	u += h5 * r[6]
	u += h6 * r[5]
	u += h7 * r[4]
	u += h8 * r[3]
	u += h9 * r[2]
	u += h10 * r[1]
	u += h11 * r[0]
	u += 320 * h12 * r[16]
	u += 320 * h13 * r[15]
	u += 320 * h14 * r[14]
	u += 320 * h15 * r[13]
	u += 320 * h16 * r[12]
	hr11 := u
	u = h0 * r[12]
	u += h1 * r[11]
	u += h2 * r[10]
	u += h3 * r[9]
	u += h4 * r[8]
	u += h5 * r[7]
	u += h6 * r[6]
	u += h7 * r[5]
	u += h8 * r[4]
	u += h9 * r[3]
	u += h10 * r[2]
	u += h11 * r[1]
	u += h12 * r[0]
	u += 320 * h13 * r[16]
	u += 320 * h14 * r[15]
	u += 320 * h15 * r[14]
	u += 320 * h16 * r[13]
	hr12 := u
	u = h0 * r[13]
	u += h1 * r[12]
	u += h2 * r[11]
	u += h3 * r[10]
	u += h4 * r[9]
	u += h5 * r[8]
	u += h6 * r[7]
	u += h7 * r[6]
	u += h8 * r[5]
	u += h9 * r[4]
	u += h10 * r[3]
	u += h11 * r[2]
	u += h12 * r[1]
	u += h13 * r[0]
	u += 320 * h14 * r[16]
	u += 320 * h15 * r[15]
	u += 320 * h16 * r[14]
	hr13 := u
	u = h0 * r[14]
	u += h1 * r[13]
	u += h2 * r[12]
	u += h3 * r[11]
	u += h4 * r[10]
	u += h5 * r[9]
	u += h6 * r[8]
	u += h7 * r[7]
	u += h8 * r[6]
	u += h9 * r[5]
	u += h10 * r[4]
	u += h11 * r[3]
	u += h12 * r[2]
	u += h13 * r[1]
	u += h14 * r[0]
	u += 320 * h15 * r[16]
	u += 320 * h16 * r[15]
	hr14 := u
	u = h0 * r[15]
	u += h1 * r[14]
	u += h2 * r[13]
	u += h3 * r[12]
	u += h4 * r[11]
	u += h5 * r[10]
	u += h6 * r[9]
	u += h7 * r[8]
	u += h8 * r[7]
	u += h9 * r[6]
	u += h10 * r[5]
	u += h11 * r[4]
	u += h12 * r[3]
	u += h13 * r[2]
	u += h14 * r[1]
	u += h15 * r[0]
	u += 320 * h16 * r[16]
	hr15 := u
	u = h0 * r[16]
	u += h1 * r[15]
	u += h2 * r[14]
	u += h3 * r[13]
	u += h4 * r[12]
	u += h5 * r[11]
	u += h6 * r[10]
	u += h7 * r[9]
	u += h8 * r[8]
	u += h9 * r[7]
	u += h10 * r[6]
	u += h11 * r[5]
	u += h12 * r[4]
	u += h13 * r[3]
	u += h14 * r[2]
	u += h15 * r[1]
	u += h16 * r[0]
	hr16 := u
	u = hr0
	hr0 = u & 255
	u >>= 8
	u += hr1
	hr1 = u & 255
	u >>= 8
	u += hr2
	hr2 = u & 255
	u >>= 8
	u += hr3
	hr3 = u & 255
	u >>= 8
	u += hr4
	hr4 = u & 255
	u >>= 8
	u += hr5
	hr5 = u & 255
	u >>= 8
	u += hr6
	hr6 = u & 255
	u >>= 8
	u += hr7
	hr7 = u & 255
	u >>= 8
	u += hr8
	hr8 = u & 255
	u >>= 8
	u += hr9
	hr9 = u & 255
	u >>= 8
	u += hr10
	hr10 = u & 255
	u >>= 8
	u += hr11
	hr11 = u & 255
	u >>= 8
	u += hr12
	hr12 = u & 255
	u >>= 8
	u += hr13
	hr13 = u & 255
	u >>= 8
	u += hr14
	hr14 = u & 255
	u >>= 8
	u += hr15
	hr15 = u & 255
	u >>= 8
	u += hr16
	hr16 = u & 3
	u = 5 * (u >> 2)
	u += hr0
	hr0 = u & 255
	u >>= 8
	u += hr1
	hr1 = u & 255
	u >>= 8
	u += hr2
	hr2 = u & 255
	u >>= 8
	u += hr3
	hr3 = u & 255
	u >>= 8
	u += hr4
	hr4 = u & 255
	u >>= 8
	u += hr5
	hr5 = u & 255
	u >>= 8
	u += hr6
	hr6 = u & 255
	u >>= 8
	u += hr7
	hr7 = u & 255
	u >>= 8
	u += hr8
	hr8 = u & 255
	u >>= 8
	u += hr9
	hr9 = u & 255
	u >>= 8
	u += hr10
	hr10 = u & 255
	u >>= 8
	u += hr11
	hr11 = u & 255
	u >>= 8
	u += hr12
	hr12 = u & 255
	u >>= 8
	u += hr13
	hr13 = u & 255
	u >>= 8
	u += hr14
	hr14 = u & 255
	u >>= 8
	u += hr15
	hr15 = u & 255
	u >>= 8
	u += hr16
	hr16 = u
	h[0] = hr0
	h[1] = hr1
	h[2] = hr2
	h[3] = hr3
	h[4] = hr4
	h[5] = hr5
	h[6] = hr6
	h[7] = hr7
	h[8] = hr8
	h[9] = hr9
	h[10] = hr10
	h[11] = hr11
	h[12] = hr12
	h[13] = hr13
	h[14] = hr14
	h[15] = hr15
	h[16] = hr16
}

func OneTimeAuth(out, in, k []byte) {
	var r [17]uint32
	h := make([]uint32, 17)
	r[0] = uint32(k[0])
	r[1] = uint32(k[1])
	r[2] = uint32(k[2])
	r[3] = uint32(k[3] & 15)
	r[4] = uint32(k[4] & 252)
	r[5] = uint32(k[5])
	r[6] = uint32(k[6])
	r[7] = uint32(k[7] & 15)
	r[8] = uint32(k[8] & 252)
	r[9] = uint32(k[9])
	r[10] = uint32(k[10])
	r[11] = uint32(k[11] & 15)
	r[12] = uint32(k[12] & 252)
	r[13] = uint32(k[13])
	r[14] = uint32(k[14])
	r[15] = uint32(k[15] & 15)

	for len(in) >= 16 {
		var u uint32
		for j, v := range in[:16] {
			u += h[j] + uint32(v)
			h[j] = u & 255
			u >>= 8
		}
		u += h[16] + 1
		h[16] = u & 255
		mulmod(h, r)
		in = in[16:]
	}
	var c [17]uint32
	if len(in) > 0 {
		for i, v := range in {
			c[i] = uint32(v)
		}
		c[len(in)] = 1
		add(h, c)
		mulmod(h, r)
	}

	freeze(h)

	for j, v := range k[16:32] {
		c[j] = uint32(v)
	}
	c[16] = 0
	add(h, c)
	for j := 0; j < 16; j++ {
		out[j] = byte(h[j])
	}
}
