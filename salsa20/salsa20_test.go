package salsa20

import (
	"bytes"
	"testing"
)

var testData = []struct {
	m, n, k, correct []byte
}{
	{
		[]byte("Hello world!"),
		[]byte("nonceS20"),
		[]byte("this is 32-byte key for salsa20!"),
		[]byte{0x55, 0xf2, 0xd8, 0x68, 0xdd, 0x5c, 0x50, 0xff, 0xdb, 0xd3, 0x02, 0xad},
	},
	{
		make([]byte, 64),
		[]byte("nonceS20"),
		[]byte("this is 32-byte key for salsa20!"),
		[]byte{0x1d, 0x97, 0xb4, 0x04, 0xb2, 0x7c, 0x27, 0x90, 0xa9,
			0xbf, 0x66, 0x8c, 0xb7, 0x65, 0x30, 0x2b, 0x25, 0x16, 0x3a,
			0x27, 0x84, 0xb6, 0x93, 0x05, 0x82, 0xb4, 0xd1, 0x93, 0xa4,
			0x34, 0x66, 0x92, 0xf3, 0x5f, 0x62, 0x87, 0x14, 0x4f, 0xac,
			0x4d, 0x97, 0xaa, 0x0d, 0xbc, 0x5b, 0xda, 0xae, 0x90, 0x39,
			0x6f, 0xcc, 0x9f, 0x54, 0xa5, 0x98, 0xa6, 0xf7, 0x09, 0xa4,
			0xc3, 0xde, 0x66, 0x95, 0x90},
	},
}

/*
func TestXor(t *testing.T) {
	for i, v := range testData {
		c := make([]byte, len(v.m))
		Xor(c, v.m, v.n, v.k)
		if !bytes.Equal(c, v.correct) {
			t.Errorf("[%d] expected %x, got %x", i, v.correct, c)
		}
	}
}
*/

func TestCore(t *testing.T) {
	var in [16]byte //:= make([]byte, 16)
	var out [64]byte //out := make([]byte, 64)
	k := []byte("this is 32-byte key for salsa20!")
	var ka [32]byte
	copy(ka[:], k)
	correct := []byte{0x8c, 0xeb, 0x15, 0x4a, 0xed, 0x8d, 0x2b, 0xa1, 0xe6, 0xf0, 0x88, 0x8e, 0x69, 0x1f, 0xef, 0x0f, 0x90, 0x10, 0xb6, 0xda, 0xf1, 0x07, 0x11, 0x43, 0x3e, 0x05, 0xda, 0xce, 0x14, 0x2b, 0x17, 0xcd, 0x4a, 0x12, 0x1e, 0x24, 0x23, 0x33, 0x17, 0x11, 0xe5, 0x4a, 0xe9, 0xa9, 0x1c, 0x7a, 0x6a, 0x80, 0x29, 0xe6, 0x97, 0x18, 0xf4, 0x0d, 0x65, 0x35, 0x30, 0x91, 0x43, 0x6e, 0x66, 0x80, 0x32, 0x5b}
	Core(&out, &in, &ka, &sigma)
	if !bytes.Equal(out[:], correct) {
		t.Errorf("expected %x, got %x", correct, out)
	}
}

var (
	keyarr [32]byte
	key = &keyarr
	noncearr [8]byte
	nonce = &noncearr
	msg = make([]byte, 8<<10)
)


func BenchmarkCore(b *testing.B) {
	b.StopTimer()
	var out [64]byte
	var in [16]byte
	b.SetBytes(64)
	b.StartTimer()
	for i := 0; i < b.N; i++ {
		Core(&out, &in, key, &sigma)
	}
}


func BenchmarkXOR1K(b *testing.B) {
	b.StopTimer()
	out := make([]byte, 1024)
	b.StartTimer()
	for i := 0; i < b.N; i++ {
		Xor(out, msg[:1024], nonce, key)
	}
	b.SetBytes(1024)
}

func BenchmarkXOR8K(b *testing.B) {
	b.StopTimer()
	out := make([]byte, len(msg))
	b.StartTimer()
	for i := 0; i < b.N; i++ {
		Xor(out, msg, nonce, key)
	}
	b.SetBytes(int64(len(msg)))
}
